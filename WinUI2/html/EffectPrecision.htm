<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Effect precision and clamping</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="EffectPrecision" /><meta name="Description" content="Care must be taken while rendering effects using Win2D to achieve the desired level of quality and predictability with respect to numerical precision." /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">Win2D documentation<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Introduction.htm" title="Win2D documentation" tocid="roottoc">Win2D documentation</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Articles.htm" title="Articles" tocid="Articles">Articles</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="Interop.htm" title="Interop with Direct2D" tocid="Interop">Interop with Direct2D</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="Offscreen.htm" title="Offscreen drawing" tocid="Offscreen">Offscreen drawing</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="DPI.htm" title="DPI and DIPs" tocid="DPI">DPI and DIPs</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="ChoosingResolution.htm" title="Choosing control resolution" tocid="ChoosingResolution">Choosing control resolution</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="PixelFormats.htm" title="Pixel formats" tocid="PixelFormats">Pixel formats</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="PremultipliedAlpha.htm" title="Premultiplied alpha" tocid="PremultipliedAlpha">Premultiplied alpha</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="BlockCompression.htm" title="Bitmap block compression" tocid="BlockCompression">Bitmap block compression</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="EffectPrecision.htm" title="Effect precision and clamping" tocid="EffectPrecision">Effect precision and clamping</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="HandlingDeviceLost.htm" title="Handling device lost" tocid="HandlingDeviceLost">Handling device lost</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="WithoutControls.htm" title="Using Win2D without built-in controls" tocid="WithoutControls">Using Win2D without built-in controls</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="LoadingResourcesOutsideCreateResources.htm" title="Loading resources outside of CreateResources" tocid="LoadingResourcesOutsideCreateResources">Loading resources outside of CreateResources</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="RefCycles.htm" title="Avoiding memory leaks" tocid="RefCycles">Avoiding memory leaks</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn">Effect precision and clamping</td></tr></table><span class="introStyle"></span> <div class="introduction"><p>
        Care must be taken while rendering effects using Win2D to achieve the desired level of 
        quality and predictability with respect to numerical precision.
      </p><p>
        You need to understand these details if:
      </p><ol><li>
          Your effect graph relies on high numerical precision or colors outside of the [0, 1] 
          range, and you want to make sure these will always be available.
        </li><li>
          Or your effect graph relies on the rendering implementation to clamp intermediate colors 
          to the [0, 1] range, so you must ensure this clamping always occurs.
        </li></ol><p>
        Win2D often divides an effect graph into sections, and renders each section in a 
        separate step. The output of some steps may be stored in intermediate Direct3D textures 
        which by default have limited numerical range and precision. Win2D makes no guarantees 
        about if or where these intermediate textures are used. This behavior may vary according to 
        GPU capabilities as well as between Windows versions.
      </p><p>
        In Windows 10, Win2D uses fewer intermediate textures due to its use of
        <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/dn879810" target="_blank">shader linking</a>.
        Win2D may therefore produce different results with default settings than in prior Windows 
        releases. This primarily affects scenarios where shader linking is possible in an effect 
        graph, and that graph also contains effects that produce extended-range output colors.
      </p></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID0RB')" onkeypress="SectionExpandCollapse_CheckKey('ID0RB', event)" tabindex="0"><img id="ID0RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Overview of effect rendering and intermediates</span></div><div id="ID0RBSection" class="collapsibleSection"><p>
          To render an effect graph, Win2D first finds the underlying graph of "transforms", 
          where a transform is a graph node used within an effect to apply a specific processing 
          operation. Each image effect may internally be implemented using one or several 
          transforms. There are different types of transforms, including those which provide 
          Direct3D shaders for Direct2D to use.
        </p><p>
          For example, Win2D may render an effect graph as follows:
        </p><div class="mediaNear"><img src="../media/EffectPrecision1.svg" /></div><p>
          Win2D looks for opportunities to avoid using intermediate textures. This logic is 
          opaque to applications, and may reduce the number of intermediate textures used. For 
          example, the following graph can be rendered by Win2D using one Direct3D draw call and 
          no intermediate textures:
        </p><div class="mediaNear"><img src="../media/EffectPrecision2.svg" /></div><p>
          Prior to Windows 10, Win2D would always use intermediate textures if multiple pixel 
          shaders were used within the same effect graph. Most built-in effects that simply adjust 
          color values (for example, Brightness or Saturation) do so using pixel shaders.
        </p><p>
          In Windows 10, Win2D may now avoid using intermediate textures in such cases. It does 
          this by internally linking adjacent pixel shaders. For example:
        </p><div class="mediaNear"><img src="../media/EffectPrecision3.svg" /></div><p>
          Note that not all adjacent pixel shaders in a graph may be linked together, and therefore 
          only certain graphs will produce different output on Windows 10. For full details see 
          <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/dn879810" target="_blank">Effect Shader Linking</a>.
          The primary restrictions are:
        </p><ul><li>
            An effect will not be linked with effects consuming its output, if the first effect is 
            connected as an input to multiple effects.
          </li><li>
            An effect will not be linked with an effect set as its input, if the first effect 
            samples its input at a different logical position than its output. For example, a 
            ColorMatrix effect might be linked with its input, but a Convolution effect will not be.
          </li></ul></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Built-in effect behavior</span></div><div id="ID1RBSection" class="collapsibleSection"><p>
          Many built-in effects may produce colors outside of the [0, 1] range in unpremultiplied 
          space, even when their input colors are within that range. When this happens, such colors 
          may be subject to numerical clamping. Note that it's important to consider the color 
          range in unpremultiplied space, even though built-in effects typically produce colors in 
          premultiplied space. This ensures that colors stay within range, even if other effects 
          subsequently unpremultiply them.
        </p><p>
          Some of the effects which emit these out-of-range colors offer a "ClampOutput" property. 
          These include:
        </p><ul><li>ColorMatrix</li><li>ArithmeticComposite</li><li>Convolve</li><li>Transfer effects</li></ul><p>
          Setting the ClampOutput property to true on these effects ensures a consistent result 
          will be achieved regardless of factors such as shader linking. Note that clamping occurs 
          in unpremultiplied space.
        </p><p>
          Other built-in effects may also produce output colors beyond the [0, 1] range in 
          unpremultiplied space, even when their color pixels (and "Color" properties if any) are 
          within that range. These include:
        </p><ul><li>Transform and Scale effects (when the InterpolationMode property is Cubic or HighQualityCubic)</li><li>Lighting effects</li><li>EdgeDetection (when the OverlayEdges property is true)</li><li>Exposure</li><li>Composite (when the Mode property is Add)</li><li>Saturation</li><li>Sepia</li><li>TemperatureAndTint</li></ul></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Forcing numerical clamping within an effect graph</span></div><div id="ID2RBSection" class="collapsibleSection"><p>
          While using effects listed above which do not have a ClampOutput property, applications 
          should consider forcing numerical clamping. This can be done by inserting an additional 
          effect into the graph that clamps its pixels. A ColorMatrix effect may be used, with its 
          'ClampOutput' property set to true.
        </p><p>
          A second option to achieve consistent results is to request that Win2D use 
          intermediate textures which have greater precision. This is described below.
        </p></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Controlling precision of intermediate textures</span></div><div id="ID4RBSection" class="collapsibleSection"><p>
          Win2D provides a few ways to control the precision of a graph.
        </p><p>
          Before using high precision formats in Win2D, applications must ensure they are supported 
          sufficiently by the GPU. To check this, use 
          <a href="M_Microsoft_Graphics_Canvas_CanvasDevice_IsBufferPrecisionSupported.htm">IsBufferPrecisionSupported(CanvasBufferPrecision)</a>.
        </p><p>
          Applications may create a Direct3D device using WARP (software emulation) to ensure that 
          all buffer precisions are supported. This is recommended in scenarios such as applying 
          effects to a photo while saving to disk. Even if Win2D supports high precision buffer 
          formats on the GPU, using WARP is recommended in this scenario on feature level 9.X GPUs, 
          due to limited precision of shader arithmetic and sampling on some low-power mobile GPUs. 
          To use software rendering, specify ForceSoftwareRenderer=true on your Win2D XAML controls
          or  when creating your CanvasDevice.
        </p><p>
          In each case below, the requested precision is actually the minimum precision Win2D 
          will use. Higher precision may be used if intermediates are not required. Win2D may 
          also share intermediate textures for different parts of the same graph or different 
          graphs entirely. In this case Win2D uses the maximum precision requested for all 
          involved operations.
        </p><p><strong>Precision selection from the drawing session</strong></p><p>
          The simplest way to control the precision of Win2D's intermediate textures is to use the 
          <a href="P_Microsoft_Graphics_Canvas_CanvasDrawingSession_EffectBufferPrecision.htm">EffectBufferPrecision</a>
          property. This controls the precision of all intermediate textures, as long as 
          a precision is not also set manually on effects directly.
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID3EAMAAAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID3EAMAAAAA');return false;" title="Copy">Copy</a></div></div><div id="ID3EAMAAAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">if</span> (canvasDevice.IsBufferPrecisionSupported(CanvasBufferPrecision.Precision32Float))
{
    drawingSession.EffectBufferPrecision = CanvasBufferPrecision.Precision32Float;
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID3EAMAAAAA");</script><p><strong>Precision selection from inputs and render targets</strong></p><p>
          Applications may also rely on the precision of the inputs to an effect graph to control 
          the precision of intermediate textures.
        </p><p>
          The precisions of inputs to effects are propagated through the graph to select the 
          precision of downstream intermediates. Where different branches in the effect graph meet, 
          the greatest precision of any input is used.
        </p><p>
          The precision selected based on a Win2D bitmap is determined from its pixel format.
        </p><p>
          It is possible that Win2D cannot assign an effect a precision based on its inputs. This 
          happens when an effect has no inputs, or when a command list is used, which has no 
          specific precision. In this case, the precision of intermediate textures is determined 
          from the current render target.
        </p><p><strong>Precision selection directly on effects</strong></p><p>
          The minimum precision for intermediate textures may also be set at explicit locations 
          within an effect graph. This is only recommended for advanced applications.
        </p><p>
          The minimum precision may be set using a property on an effect as follows:
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID3EADAAAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID3EADAAAAA');return false;" title="Copy">Copy</a></div></div><div id="ID3EADAAAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">if</span> (canvasDevice.IsBufferPrecisionSupported(CanvasBufferPrecision.Precision32Float))
{
    blurEffect.BufferPrecision = CanvasBufferPrecision.Precision32Float;
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID3EADAAAAA");</script><p>      
          Note that the precision set on an effect will also apply to effects downstream in the 
          same effect graph, unless a different precision is set on those downstream effects.
        </p><p>
          Below is the full recursive logic used to determine the minimum precision for an 
          intermediate buffer storing the output of a given transform node:
        </p><div class="mediaNear"><img src="../media/EffectPrecision4.svg" /></div></div></div></div><div id="pageFooter" class="pageFooter"><p><a href="http://github.com/Microsoft/Win2D/blob/master/LICENSE.txt" target="_blank">Copyright (c) Microsoft Corporation. All rights reserved.</a></p></div></body></html>