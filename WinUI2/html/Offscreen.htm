<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Offscreen drawing</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="Offscreen" /><meta name="Description" content="Apps occasionally need to draw graphics to a target, where that target is not intended for immediate display. This type of drawing is sometimes called &quot;offscreen rendering&quot;, or &quot;drawing to a texture&quot;." /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">Win2D documentation<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Introduction.htm" title="Win2D documentation" tocid="roottoc">Win2D documentation</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Articles.htm" title="Articles" tocid="Articles">Articles</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="Interop.htm" title="Interop with Direct2D" tocid="Interop">Interop with Direct2D</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="Offscreen.htm" title="Offscreen drawing" tocid="Offscreen">Offscreen drawing</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="DPI.htm" title="DPI and DIPs" tocid="DPI">DPI and DIPs</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="ChoosingResolution.htm" title="Choosing control resolution" tocid="ChoosingResolution">Choosing control resolution</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="PixelFormats.htm" title="Pixel formats" tocid="PixelFormats">Pixel formats</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="PremultipliedAlpha.htm" title="Premultiplied alpha" tocid="PremultipliedAlpha">Premultiplied alpha</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="BlockCompression.htm" title="Bitmap block compression" tocid="BlockCompression">Bitmap block compression</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="EffectPrecision.htm" title="Effect precision and clamping" tocid="EffectPrecision">Effect precision and clamping</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="HandlingDeviceLost.htm" title="Handling device lost" tocid="HandlingDeviceLost">Handling device lost</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="WithoutControls.htm" title="Using Win2D without built-in controls" tocid="WithoutControls">Using Win2D without built-in controls</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="LoadingResourcesOutsideCreateResources.htm" title="Loading resources outside of CreateResources" tocid="LoadingResourcesOutsideCreateResources">Loading resources outside of CreateResources</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="RefCycles.htm" title="Avoiding memory leaks" tocid="RefCycles">Avoiding memory leaks</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn">Offscreen drawing</td></tr></table><span class="introStyle"></span> <div id="ID1RBSection" class="collapsibleSection"><p>
          Apps occasionally need to draw graphics to a target, where that
          target is <strong>not</strong> intended for immediate 
          display. This type of drawing is sometimes called "offscreen 
          rendering", or "drawing to a texture".
          This is useful when, for example, an app's output of a drawing
          operation is to be saved to a file, returned as an array of pixels,
          or used as an input to a later operation.
        </p><p>
          Win2D supports these scenarios, and they are made easy with
          <a href="T_Microsoft_Graphics_Canvas_CanvasRenderTarget.htm">CanvasRenderTarget</a>.
        </p><p>
          CanvasRenderTarget extends 
          <a href="T_Microsoft_Graphics_Canvas_CanvasBitmap.htm">CanvasBitmap</a>, 
          and has the method 
          <a href="M_Microsoft_Graphics_Canvas_CanvasRenderTarget_CreateDrawingSession.htm">CreateDrawingSession<span id="LST8949B73E_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST8949B73E_0?cs=()|vb=|cpp=()|nu=()|fs=()");</script></a>. 
          Use CreateDrawingSession to draw graphics content to a
          CanvasRenderTarget. For example:
          <div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EABFAAAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EABFAAAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EABFAAAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">CanvasDevice device = CanvasDevice.GetSharedDevice();
CanvasRenderTarget offscreen = <span class="highlight-keyword">new</span> CanvasRenderTarget(device, width, height, <span class="highlight-number">96</span>);
<span class="highlight-keyword">using</span> (CanvasDrawingSession ds = offscreen.CreateDrawingSession())
{
    ds.Clear(Colors.Black);
    ds.DrawRectangle(<span class="highlight-number">100</span>, <span class="highlight-number">200</span>, <span class="highlight-number">5</span>, <span class="highlight-number">6</span>, Colors.Red);
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EABFAAAAA");</script>
          Note that there is a method call to 'Clear'. Without this, the bitmap
          will be initialized with undefined content. Drawing sessions created
          through CanvasRenderTarget are different from those created on Win2D's
          XAML controls, in terms of the Clear behavior. Controls are always
          cleared automatically by Win2D when a drawing session is created.
          CanvasRenderTargets are not. This way, apps have the ability to make
          incremental changes to CanvasRenderTargets, and avoid redrawing an
          entire scene every time.
        </p><p>
          To draw a CanvasRenderTarget to another drawing session, simply
          use 
          <a href="M_Microsoft_Graphics_Canvas_CanvasDrawingSession_DrawImage_4.htm">DrawImage(ICanvasImage)</a>
          or one of its overloads. For example:
          <div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAEAAAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAAEAAAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAEAAAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">void</span> canvasControl_Draw(CanvasControl sender, CanvasDrawEventArgs args)
{
    args.DrawingSession.DrawImage(offscreen, <span class="highlight-number">23</span>, <span class="highlight-number">34</span>);
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAEAAAAA");</script></p><p>
          Or, to use a CanvasRenderTarget as an input to an effect, pass it
          in wherever the effect expects to use an <span class="nolink">IGraphicsEffectSource</span>
          as a source. For example:
          <div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAADAAAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAADAAAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAADAAAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">GaussianBlurEffect blurEffect = <span class="highlight-keyword">new</span> GaussianBlurEffect()
{
    Source = offscreen,
    BlurAmount = <span class="highlight-number">3.0</span>f
};</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAADAAAAA");</script></p><p>
          An app can close, and re-open drawing sessions on a CanvasRenderTarget
          abitrarily many times.
        </p><p>
          Drawing operations are not committed to the CanvasRenderTarget until 
          the drawing session object is disposed. In C#, a 'using' block can 
          organize this.
        </p><p>
          It's worth pointing out that CanvasRenderTarget is not a XAML control,
          and does not involve the XAML tree at all. It is suitable for both
          XAML and non-XAML-based apps.
        </p></div></div></div><div id="pageFooter" class="pageFooter"><p><a href="http://github.com/Microsoft/Win2D/blob/master/LICENSE.txt" target="_blank">Copyright (c) Microsoft Corporation. All rights reserved.</a></p></div></body></html>